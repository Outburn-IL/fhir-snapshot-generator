import { FhirPackageExplorer, LookupFilter } from 'fhir-package-explorer';
import { ElementDefinition } from '../../types';

/**
 * Fetches the snapshot elements for a given structure definition id or url.
 * TODO: Replace with a recursion once snapshot generation and caching is implemented.
 * @param idOrUrl - the id or url of the structure definition to fetch
 * @param fpe - the FhirPackageExplorer instance to use for fetching
 * @param pkg? - the package name to filter by (optional) 
 * @returns - a promise that resolves to an array of ElementDefinition objects
 */
export const getSnapshotElements = async (idOrUrl: string, fpe: FhirPackageExplorer, pkg?: string): Promise<ElementDefinition[]> => {
  // Placeholder for the actual getSnapshot that will be part of this package and use cache
  // Currently all requests are passed to fhir-package-explorer and no cache is used
  // Also all snapshots returned are the ones that exist in original package and not the ones generated by us

  // if the string starts with 'http[s]:', it is a url, otherwise it is an id
  const isUrl = idOrUrl.startsWith('http:') || idOrUrl.startsWith('https:');
  const filter: LookupFilter = { [isUrl ? 'url' : 'id']: idOrUrl };
  if (pkg) {
    filter.package = pkg;
  }
  const snapshot = await fpe.resolve({ resourceType: 'StructureDefinition', ...filter });
  return snapshot.snapshot.element;
};